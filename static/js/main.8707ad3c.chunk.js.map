{"version":3,"sources":["StarGame/GameHeader.jsx","StarGame/Utils.jsx","StarGame/PlayNumber.jsx","StarGame/StarDisplay.jsx","StarGame/PlayAgain.jsx","StarGame/Game.jsx","StarGame/GameApp.jsx","index.js"],"names":["GameHeader","className","Utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","Colors","available","used","wrong","candidate","PlayNumber","props","style","backgroundColor","status","onClick","event","number","StarDisplay","count","map","startId","index","PlayAgain","color","gameStatus","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","candidatesAreWrong","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","startNewGame","GameApp","gameId","setGameId","ReactDOM","render","href","target","document","getElementById"],"mappings":"oMAYeA,EAVI,WACf,OACI,mCACI,qBAAKC,UAAU,OAAf,uECFNC,EAAQ,CAEVC,IAAK,SAAAC,GAAG,OAAIA,EAAIC,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,IAGlDC,MAAO,SAACC,EAAKC,GAAN,OAAcC,MAAMC,KAAK,CAAEC,OAAQH,EAAMD,EAAM,IAAK,SAACK,EAAGC,GAAJ,OAAUN,EAAMM,MAG3EC,OAAQ,SAACP,EAAKC,GAAN,OAAcD,EAAMQ,KAAKC,MAAMD,KAAKD,UAAYN,EAAMD,EAAM,KAIpEU,YAAa,SAACf,EAAKM,GAGjB,IAFA,IAAMU,EAAO,CAAC,IACRC,EAAO,GACJN,EAAI,EAAGA,EAAIX,EAAIS,OAAQE,IAC9B,IAAK,IAAIO,EAAI,EAAGC,EAAMH,EAAKP,OAAQS,EAAIC,EAAKD,IAAK,CAC/C,IAAME,EAAeJ,EAAKE,GAAGG,OAAOrB,EAAIW,IAClCW,EAAexB,EAAMC,IAAIqB,GAC3BE,GAAgBhB,IAClBU,EAAKO,KAAKH,GACVH,EAAKM,KAAKD,IAIhB,OAAOL,EAAKnB,EAAMc,OAAO,EAAGK,EAAKR,OAAS,MAKxCe,EAAS,CACbC,UAAW,YACXC,KAAM,aACNC,MAAO,aACPC,UAAW,eAGE9B,ICnBF+B,EAjBI,SAACC,GAKhB,OACI,wBACIjC,UAAU,SACVkC,MAAO,CAACC,gBAAiBR,EAAOM,EAAMG,SACtCC,QARiB,SAACC,GACtBL,EAAMI,QAAQJ,EAAMM,OAAQN,EAAMG,SAIlC,SAIKH,EAAMM,UCAJC,EAVK,SAACP,GACjB,OACI,mCACKhC,EAAMM,MAAM,EAAG0B,EAAMQ,OAAOC,KAAK,SAACC,EAASC,GACxC,OAAQ,qBAAmB5C,UAAU,QAAnB2C,SCOnBE,EAbG,SAACZ,GACf,OACI,mCACI,sBAAKjC,UAAU,YAAf,UACI,qBAAKA,UAAU,UAAUkC,MAAS,CAACY,MAA4B,SAArBb,EAAMc,WAAwB,MAAQ,SAAhF,SAC0B,SAArBd,EAAMc,WAAwB,YAAc,gBAEjD,wBAAQV,QAASJ,EAAMI,QAAvB,gCC4FDW,EA7FF,SAACf,GAAW,IAAD,EACMgB,mBAAShD,EAAMc,OAAO,EAAG,IAD/B,mBACbmC,EADa,KACNC,EADM,OAEsBF,mBAAShD,EAAMM,MAAM,EAAE,IAF7C,mBAEb6C,EAFa,KAEEC,EAFF,OAGsBJ,mBAAS,IAH/B,mBAGbK,EAHa,KAGEC,EAHF,OAIkBN,mBAAS,IAJ3B,mBAIbO,EAJa,KAIAC,EAJA,KAMpBC,qBAAU,WACN,GAAIF,EAAc,GAAKJ,EAAcxC,OAAS,EAAE,CAC5C,IAAM+C,EAAUC,YAAW,WACvBH,EAAeD,EAAc,KAC9B,KAEH,OAAO,kBAAMK,aAAaF,QAKlC,IAAMG,EAAqB7D,EAAMC,IAAIoD,GAAiBJ,EAIhDH,GAHaK,EAAcxC,OAGW,IAAzBwC,EAAcxC,OAAe,MAAwB,IAAhB4C,EAAoB,OAAS,UAS/EO,EAAe,SAACxB,GAClB,OAAIa,EAAcY,SAASzB,GAGvBe,EAAcU,SAASzB,GAChBuB,EAAqB,QAAU,YAEnC,YALI,QAQTG,EAAgB,SAAC1B,EAAQ2B,GAC3B,GAAsB,SAAlBA,GAA4C,WAAhBnB,EAAhC,CAGA,IAAMoB,EAAqC,cAAlBD,EACnBZ,EAAc9B,OAAOe,GACrBe,EAAcc,QAAO,SAAAC,GAAE,OAAIA,IAAO9B,KACxC,GAAItC,EAAMC,IAAIiE,KAAsBjB,EAChCK,EAAiBY,OACd,CACH,IAAMG,EAAmBlB,EAAcgB,QACnC,SAAAG,GAAC,OAAKJ,EAAiBH,SAASO,MAGpCpB,EAASlD,EAAMiB,YAAYoD,EAAkB,IAC7CjB,EAAiBiB,GACjBf,EAAiB,OAIzB,OACE,sBAAKvD,UAAU,OAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SACkB,WAAf+C,EACG,cAAC,EAAD,CAAWV,QA3CL,WACdJ,EAAMuC,gBA0CiCzB,WAAYA,IAE3C,cAAC,EAAD,CAAaN,MAAOS,MAI1B,qBAAKlD,UAAU,QAAf,SAEIC,EAAMM,MAAM,EAAG,GAAGmC,KAAK,SAACH,EAAQK,GAC5B,OACI,cAAC,EAAD,CAEEL,OAAQA,EACRH,OAAQ2B,EAAaxB,GACrBF,QAAU4B,GAHL1B,WAUrB,sBAAKvC,UAAU,QAAf,sCAAiDwD,SCjF1CiB,EAVC,WAAK,IAAD,EACYxB,mBAAS,GADrB,mBACTyB,EADS,KACDC,EADC,KAGhB,OACI,mCACA,cAAC,EAAD,CAAmBH,aAAc,kBAAKG,EAAUD,EAAO,KAA5CA,MCDnBE,IAASC,OACL,qCACI,cAAC,EAAD,IAEA,oBAAGC,KAAK,mDAAmDC,OAAO,SAAlE,cAA4E,8CAA5E,UAEJC,SAASC,eAAe,W","file":"static/js/main.8707ad3c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst GameHeader = () =>{\r\n    return (\r\n        <>\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GameHeader;","import React from 'react';\r\n\r\n// Math science\r\nconst Utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = Utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[Utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\n  // Color Theme\r\n  const Colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n\r\n  export default Utils;\r\n\r\n  export {Colors};","import React from 'react';\r\n\r\nimport {Colors} from './Utils';\r\n\r\nconst PlayNumber = (props) => {\r\n    const buttonClickEvent = (event) =>{\r\n        props.onClick(props.number, props.status);\r\n    };\r\n    \r\n    return (\r\n        <button \r\n            className=\"number\" \r\n            style={{backgroundColor: Colors[props.status]}}\r\n            onClick={buttonClickEvent}> \r\n            {props.number} \r\n        </button>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default PlayNumber;","import React from 'react';\r\n\r\nimport Utils from './Utils';\r\n\r\nconst StarDisplay = (props) => {\r\n    return(\r\n        <>\r\n            {Utils.range(1, props.count).map( (startId, index ) => {\r\n                return (<div key={startId} className=\"star\" />);\r\n            }) }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StarDisplay;","import React from 'react';\r\n\r\nconst PlayAgain = (props) => {\r\n    return (\r\n        <>\r\n            <div className=\"game-done\">\r\n                <div className=\"message\" style = {{color: props.gameStatus === 'lost' ? 'red' : 'green'}}>\r\n                    {props.gameStatus === 'lost' ? 'Game Over' : 'You Won !!!'}\r\n                </div>\r\n                <button onClick={props.onClick}> Play Again </button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PlayAgain;","import React, {useEffect, useState} from 'react';\r\n\r\nimport GameHeader from './GameHeader';\r\nimport PlayNumber from './PlayNumber';\r\nimport StarDisplay from './StarDisplay';\r\nimport PlayAgain from './PlayAgain';\r\nimport Utils from './Utils';\r\n\r\nconst Game = (props) => {\r\n    const [stars, setStars] = useState(Utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(Utils.range(1,9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n    \r\n    useEffect(() =>{\r\n        if (secondsLeft > 0 && availableNums.length > 0){\r\n            const timerId = setTimeout(() =>{\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n\r\n            return () => clearTimeout(timerId);\r\n        }\r\n    });\r\n\r\n\r\n    const candidatesAreWrong = Utils.sum(candidateNums) > stars;\r\n    const gameIsDone = availableNums.length === 0;\r\n    const gameIsLost = secondsLeft === 0;\r\n\r\n    const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active'\r\n\r\n    const resetGame = () =>{\r\n        props.startNewGame();\r\n    //     setStars(Utils.random(1, 9));\r\n    //     setAvailableNums(Utils.range(1,9));\r\n    //     setCandidateNums([]);\r\n    }\r\n\r\n    const numberStatus = (number) => {\r\n        if(!availableNums.includes(number)){\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)){\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        if (currentStatus === 'used' || gameStatus !==  'active'){\r\n            return;\r\n        }\r\n        const newCandidateNums = currentStatus === 'available' \r\n            ? candidateNums.concat(number) \r\n            : candidateNums.filter(cn => cn !== number);\r\n        if (Utils.sum(newCandidateNums) !== stars){\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter( \r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n            // redraw stars from what is available\r\n            setStars(Utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    };\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <GameHeader />\r\n        <div className=\"body\">\r\n          <div className=\"left\">\r\n            {gameStatus !== 'active' ? (\r\n                <PlayAgain onClick={resetGame} gameStatus={gameStatus}/>\r\n            ) : (\r\n                <StarDisplay count={stars}/>\r\n            ) }\r\n\r\n          </div>\r\n          <div className=\"right\">\r\n          {\r\n              Utils.range(1, 9).map( (number, index) =>{\r\n                  return(\r\n                      <PlayNumber \r\n                        key={number} \r\n                        number={number}                         \r\n                        status={numberStatus(number)}\r\n                        onClick= {onNumberClick}\r\n                      />\r\n                  );\r\n              } )\r\n          }\r\n          </div>\r\n        </div>\r\n        <div className=\"timer\">Time Remaining(Seconds): {secondsLeft}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\nexport default Game;","import React, {useState} from 'react';\r\n\r\nimport Game from './Game';\r\n  \r\nconst GameApp = ()=>{\r\n    const [gameId, setGameId] = useState(1);\r\n\r\n    return (\r\n        <>\r\n        <Game key={gameId} startNewGame={()=> setGameId(gameId+1)}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GameApp;","import React, {useEffect, useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport GameApp from './StarGame/GameApp';\r\n  \r\n  \r\n  \r\nReactDOM.render(\r\n    <>\r\n        <GameApp/> \r\n        \r\n        <a href=\"https://github.com/shekhawatravi/react-star-game\" target=\"_blank\"> <h3> Source Code</h3> </a>\r\n    </>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}